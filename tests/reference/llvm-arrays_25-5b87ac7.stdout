; ModuleID = 'LFortran'
source_filename = "LFortran"

%model_t = type { %array* }
%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }

@0 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@3 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value5 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %__1_t = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %__1_t1 = alloca i32, align 4
  %m = alloca %model_t, align 8
  %4 = getelementptr %model_t, %model_t* %m, i32 0, i32 0
  store %array* null, %array** %4, align 8
  %arr_desc = alloca %array, align 8
  %5 = getelementptr %array, %array* %arr_desc, i32 0, i32 2
  %6 = alloca i32, align 4
  store i32 1, i32* %6, align 4
  %7 = load i32, i32* %6, align 4
  %8 = alloca %dimension_descriptor, i32 %7, align 8
  store %dimension_descriptor* %8, %dimension_descriptor** %5, align 8
  %9 = getelementptr %array, %array* %arr_desc, i32 0, i32 4
  store i32 1, i32* %9, align 4
  %10 = getelementptr %array, %array* %arr_desc, i32 0, i32 0
  store i32* null, i32** %10, align 8
  store %array* %arr_desc, %array** %4, align 8
  %11 = getelementptr %model_t, %model_t* %m, i32 0, i32 0
  %12 = load %array*, %array** %11, align 8
  %13 = ptrtoint %array* %12 to i32
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %then, label %else

then:                                             ; preds = %.entry
  %15 = alloca %array, align 8
  %16 = getelementptr %array, %array* %15, i32 0, i32 2
  %17 = alloca i32, align 4
  store i32 1, i32* %17, align 4
  %18 = load i32, i32* %17, align 4
  %19 = alloca %dimension_descriptor, i32 %18, align 8
  store %dimension_descriptor* %19, %dimension_descriptor** %16, align 8
  %20 = getelementptr %array, %array* %15, i32 0, i32 4
  store i32 1, i32* %20, align 4
  store %array* %15, %array** %11, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %21 = load %array*, %array** %11, align 8
  %22 = getelementptr %array, %array* %21, i32 0, i32 1
  store i32 0, i32* %22, align 4
  %23 = getelementptr %array, %array* %21, i32 0, i32 2
  %24 = load %dimension_descriptor*, %dimension_descriptor** %23, align 8
  %25 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %24, i32 0
  %26 = getelementptr %dimension_descriptor, %dimension_descriptor* %25, i32 0, i32 0
  %27 = getelementptr %dimension_descriptor, %dimension_descriptor* %25, i32 0, i32 1
  %28 = getelementptr %dimension_descriptor, %dimension_descriptor* %25, i32 0, i32 2
  store i32 1, i32* %26, align 4
  store i32 1, i32* %27, align 4
  store i32 10, i32* %28, align 4
  %29 = getelementptr %array, %array* %21, i32 0, i32 0
  %30 = alloca i32, align 4
  store i32 40, i32* %30, align 4
  %31 = load i32, i32* %30, align 4
  %32 = call i8* @_lfortran_malloc(i32 %31)
  %33 = bitcast i8* %32 to i32*
  store i32* %33, i32** %29, align 8
  %34 = getelementptr %model_t, %model_t* %m, i32 0, i32 0
  %35 = load %array*, %array** %34, align 8
  %36 = getelementptr %array, %array* %35, i32 0, i32 2
  %37 = load %dimension_descriptor*, %dimension_descriptor** %36, align 8
  %38 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %37, i32 0
  %39 = getelementptr %dimension_descriptor, %dimension_descriptor* %38, i32 0, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = sub i32 %40, 1
  store i32 %41, i32* %__1_t1, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %ifcont
  %42 = load i32, i32* %__1_t1, align 4
  %43 = add i32 %42, 1
  %44 = getelementptr %model_t, %model_t* %m, i32 0, i32 0
  %45 = load %array*, %array** %44, align 8
  %46 = getelementptr %array, %array* %45, i32 0, i32 2
  %47 = load %dimension_descriptor*, %dimension_descriptor** %46, align 8
  %48 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %47, i32 0
  %49 = getelementptr %dimension_descriptor, %dimension_descriptor* %48, i32 0, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr %dimension_descriptor, %dimension_descriptor* %48, i32 0, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = add i32 %52, %50
  %54 = sub i32 %53, 1
  %55 = icmp sle i32 %43, %54
  br i1 %55, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %56 = load i32, i32* %__1_t1, align 4
  %57 = add i32 %56, 1
  store i32 %57, i32* %__1_t1, align 4
  %58 = getelementptr %model_t, %model_t* %m, i32 0, i32 0
  %59 = load i32, i32* %__1_t1, align 4
  %60 = load %array*, %array** %58, align 8
  %61 = getelementptr %array, %array* %60, i32 0, i32 2
  %62 = load %dimension_descriptor*, %dimension_descriptor** %61, align 8
  %63 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %62, i32 0
  %64 = getelementptr %dimension_descriptor, %dimension_descriptor* %63, i32 0, i32 1
  %65 = load i32, i32* %64, align 4
  %66 = sub i32 %59, %65
  %67 = getelementptr %dimension_descriptor, %dimension_descriptor* %63, i32 0, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = mul i32 %68, %66
  %70 = add i32 0, %69
  %71 = getelementptr %array, %array* %60, i32 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = add i32 %70, %72
  %74 = getelementptr %array, %array* %60, i32 0, i32 0
  %75 = load i32*, i32** %74, align 8
  %76 = getelementptr inbounds i32, i32* %75, i32 %73
  store i32 0, i32* %76, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %77 = getelementptr %model_t, %model_t* %m, i32 0, i32 0
  %78 = load %array*, %array** %77, align 8
  %79 = getelementptr %array, %array* %78, i32 0, i32 2
  %80 = load %dimension_descriptor*, %dimension_descriptor** %79, align 8
  %81 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %80, i32 0
  %82 = getelementptr %dimension_descriptor, %dimension_descriptor* %81, i32 0, i32 1
  %83 = load i32, i32* %82, align 4
  %84 = sub i32 5, %83
  %85 = getelementptr %dimension_descriptor, %dimension_descriptor* %81, i32 0, i32 0
  %86 = load i32, i32* %85, align 4
  %87 = mul i32 %86, %84
  %88 = add i32 0, %87
  %89 = getelementptr %array, %array* %78, i32 0, i32 1
  %90 = load i32, i32* %89, align 4
  %91 = add i32 %88, %90
  %92 = getelementptr %array, %array* %78, i32 0, i32 0
  %93 = load i32*, i32** %92, align 8
  %94 = getelementptr inbounds i32, i32* %93, i32 %91
  store i32 5, i32* %94, align 4
  %95 = getelementptr %model_t, %model_t* %m, i32 0, i32 0
  %96 = load %array*, %array** %95, align 8
  %97 = getelementptr %model_t, %model_t* %m, i32 0, i32 0
  %98 = load %array*, %array** %97, align 8
  %99 = getelementptr %array, %array* %98, i32 0, i32 2
  %100 = load %dimension_descriptor*, %dimension_descriptor** %99, align 8
  %101 = getelementptr %array, %array* %98, i32 0, i32 4
  %102 = load i32, i32* %101, align 4
  store i32 1, i32* %3, align 4
  store i32 0, i32* %2, align 4
  br label %loop.head2

loop.head2:                                       ; preds = %loop.body3, %loop.end
  %103 = load i32, i32* %2, align 4
  %104 = icmp slt i32 %103, %102
  br i1 %104, label %loop.body3, label %loop.end4

loop.body3:                                       ; preds = %loop.head2
  %105 = load i32, i32* %2, align 4
  %106 = load i32, i32* %3, align 4
  %107 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %100, i32 %105
  %108 = getelementptr %dimension_descriptor, %dimension_descriptor* %107, i32 0, i32 2
  %109 = load i32, i32* %108, align 4
  %110 = mul i32 %106, %109
  store i32 %110, i32* %3, align 4
  %111 = add i32 %105, 1
  store i32 %111, i32* %2, align 4
  br label %loop.head2

loop.end4:                                        ; preds = %loop.head2
  %112 = load i32, i32* %3, align 4
  %113 = getelementptr %model_t, %model_t* %m, i32 0, i32 0
  %114 = load %array*, %array** %113, align 8
  %115 = getelementptr %array, %array* %114, i32 0, i32 0
  %116 = load i32*, i32** %115, align 8
  %117 = getelementptr %array, %array* %114, i32 0, i32 1
  %118 = load i32, i32* %117, align 4
  %119 = getelementptr inbounds i32, i32* %116, i32 %118
  %120 = call i8* (i32, i8*, ...) @_lcompilers_string_format_fortran(i32 3, i8* null, i32 10, i32 %112, i32* %119)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* %120, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  %121 = getelementptr %model_t, %model_t* %m, i32 0, i32 0
  %122 = load %array*, %array** %121, align 8
  %123 = getelementptr %array, %array* %122, i32 0, i32 0
  %124 = load i32*, i32** %123, align 8
  %125 = getelementptr %array, %array* %122, i32 0, i32 1
  %126 = load i32, i32* %125, align 4
  %127 = getelementptr inbounds i32, i32* %124, i32 %126
  %128 = getelementptr %model_t, %model_t* %m, i32 0, i32 0
  %129 = load %array*, %array** %128, align 8
  %130 = getelementptr %array, %array* %129, i32 0, i32 2
  %131 = load %dimension_descriptor*, %dimension_descriptor** %130, align 8
  %132 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %131, i32 0
  %133 = getelementptr %dimension_descriptor, %dimension_descriptor* %132, i32 0, i32 1
  %134 = load i32, i32* %133, align 4
  store i32 %134, i32* %call_arg_value, align 4
  %135 = getelementptr %model_t, %model_t* %m, i32 0, i32 0
  %136 = load %array*, %array** %135, align 8
  %137 = getelementptr %array, %array* %136, i32 0, i32 2
  %138 = load %dimension_descriptor*, %dimension_descriptor** %137, align 8
  %139 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %138, i32 0
  %140 = getelementptr %dimension_descriptor, %dimension_descriptor* %139, i32 0, i32 2
  %141 = load i32, i32* %140, align 4
  store i32 %141, i32* %call_arg_value5, align 4
  call void @decode_integer____0(i32* %127, i32* %call_arg_value, i32* %call_arg_value5)
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %loop.end4
  ret i32 0
}

define void @decode_integer____0(i32* %idx, i32* %__1idx, i32* %__2idx) {
.entry:
  %0 = load i32, i32* %__1idx, align 4
  %1 = load i32, i32* %__2idx, align 4
  %2 = sub i32 4, %0
  %3 = mul i32 1, %2
  %4 = add i32 0, %3
  %5 = mul i32 1, %1
  %6 = getelementptr inbounds i32, i32* %idx, i32 %4
  %7 = load i32, i32* %6, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %9 = load i32, i32* %__1idx, align 4
  %10 = load i32, i32* %__2idx, align 4
  %11 = sub i32 5, %9
  %12 = mul i32 1, %11
  %13 = add i32 0, %12
  %14 = mul i32 1, %10
  %15 = getelementptr inbounds i32, i32* %idx, i32 %13
  %16 = load i32, i32* %15, align 4
  %17 = icmp ne i32 %16, 5
  br i1 %17, label %then1, label %else2

then1:                                            ; preds = %ifcont
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  br label %return

return:                                           ; preds = %ifcont3
  ret void
}

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_call_initial_functions(i32, i8**)

declare i8* @_lfortran_malloc(i32)

declare i8* @_lcompilers_string_format_fortran(i32, i8*, ...)

declare void @_lfortran_printf(i8*, ...)

declare void @_lpython_free_argv()
